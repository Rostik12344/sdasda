import wmi
import platform
import psutil
import subprocess
import re
import socket
import screeninfo
from screeninfo import get_monitors
from tabulate import tabulate
import hashlib

# База данных пользователя 
user_database = {
    "Буянов Ростислав Артемович": "6394b2c299ce99e4b30a354067011804", # 82723 MD5 хеш пароля
    "user2Б": "4b4becf28a5936f5e7cfb66e089c9f59",  #22834 MD5 хеш пароля
    "user00": "86de77ac74126c75c2d2011f7a845959",  #76352 MD5 хеш пароля
    "user-": "c3eb2528840ec195a9ceae3171650780", #05725 MD5 хеш пароля
    "user228": "41bebf6a6be8fced8d8e6b0c773eed4c", #26432 MD5 хеш пароля
    "user15": "2c7b18e387e5d3a2dbbae05fc7e740ef", #96936 MD5 хеш пароля
    "user+": "4d0a38583756e8f16d9cc9cd93465599", #55234 MD5 хеш пароля
    "user-+": "c03b3b28a9d9e31610056758ea384f1a", #018822 MD5 хеш пароля
}

def save_user(username, password):
    # Хэшировать пароль перед сохранением в базу данных
    hashed_password = hashlib.md5(password.encode()).hexdigest()
    user_database[username] = hashed_password


def login():
    while True:
        # Запросить у пользователя логин и пароль
        username = input("Введите логин: ")
        password = input("Введите пароль: ")

        # Проверить, существует ли пользователь и совпадает ли хэшированный пароль
        if username in user_database and user_database[username] == hashlib.md5(password.encode()).hexdigest():
            print("Вход выполнен успешно!")
            break
        else:
            print("Неверный логин или пароль. Попробуйте снова.")

# Вызов функции входа
login()


#Ввод данный пользователя ФИО
Name = input("Введите Ф.И.О. : ")

# Получение IP-адреса пользователя
def get_user_ip():
    try:
        # Создание UDP-сокета
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        sock.connect(("8.8.8.8", 80))  # Подключение к удаленному хосту

        # Получение IP-адреса пользователя
        user_ip = sock.getsockname()[0]

        return user_ip
    except socket.error:
        return None

# Вывод IP-адреса пользователя
ip_address = get_user_ip()
if ip_address:
    print(Name, "/ IP Address:", ip_address)
else:
    print("Failed to retrieve IP address.")


#Информация о системе
c = wmi.WMI()
my_system = c.Win32_ComputerSystem()[0]
print(f" Manufacturer: {my_system.Manufacturer}")
print(f" Model: {my_system.Model}")
print(f" Name: {my_system.Name}")
print(f" NumberOfProcessors: {my_system.NumberOfProcessors}")
print(f" SystemType: {my_system.SystemType}")
print(f" SystemFamily: {my_system.SystemFamily}")

#Системная информация
system_info = platform.uname()
print(f" System:", system_info.system)
print(f" Node Name:", system_info.node)
print(f" Release:", system_info.release)
print(f" Version:", system_info.version)
print(f" Machine:", system_info.machine)
print(f" Processor:", system_info.processor)

#Наименование пользователя
user = platform.uname().node
print(f"User:", user)

#Информация о памяти
memory_info = psutil.virtual_memory()
print(f"\nMemory Info:")
print("  Total:", memory_info.total)
print("  Available:", memory_info.available)
print("  Used:", memory_info.used)
print("  Free:", memory_info.free)
print("  Percentage:", memory_info.percent)

#Информация о жестком диске
disk_info = psutil.disk_usage('/')
print(f"\nDisk Info:")
print("  Total:", disk_info.total)
print("  Used:", disk_info.used)
print("  Free:", disk_info.free)
print("  Percentage:", disk_info.percent)

#Информация о батарее(ноутбук)
battery_info = psutil.sensors_battery()
print("\nBattery Info:")
if battery_info:
    percent = battery_info.percent
    print(f"Percentage: {percent}%")
    plugged = battery_info.power_plugged
    print(f"Plugged in: {plugged}")

#Информация о запущенных процессах     
process_info = psutil.process_iter()
print("Running Processes:")
for process in process_info:
    print(f"\nProcess ID: {process.pid}")
    print(f"  Name: {process.name()}")

#Установленные программы
w = wmi.WMI()
for p in w.Win32_Product():
    if p.Version is not None:        
        print(f"Version: {p.Version}")
    print(f"Vendor: {p.Vendor}")    
    (f"Caption: {p.Caption}")
    print("\nhline")
    

#Информация о интернете
def get_tcpip_config():  
    interfaces = psutil.net_if_addrs() 
    for interface, addresses in interfaces.items(): 
        print(f"Interface: {interface}") 
        for address in addresses: 
            if address.family == socket.AF_INET: 
                print(f"    IPv4 Address: {address.address}") 
                print(f"    Netmask: {address.netmask}") 
                print(f"    Broadcast IP: {address.broadcast}") 
            elif address.family == socket.AF_INET6: 
                print(f"    IPv6 Address: {address.address}") 
                print(f"    Netmask: {address.netmask}") 
get_tcpip_config()
 
#Информация о мониторе
for m in get_monitors():
    print(str(m))

# Выполнение команды для получения информации о BIOS (работает на Windows)
output = subprocess.check_output('wmic bios get serialnumber', shell=True)
print(f"Серийный номер BIOS: {output.decode('  utf-8').strip()}")

#Серийный номер процессора
processor_serial = None
if platform.system() == 'Windows':
    processor_serial = platform.win32_edition()
    print(f"Серийный номер процессора:", processor_serial)
